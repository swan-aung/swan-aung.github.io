[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to “The Machine Learning Journey”!\nMy name is Swan Aung and I am a Machine Learning enthusiast and practitioner. On this blog, I will be sharing my thoughts, experiences, and insights on the fascinating world of Machine Learning and Artificial Intelligence. Whether you are a beginner looking to learn more about these technologies or an experienced practitioner looking for new ideas and perspectives, I hope you will find something of value here. Thank you for joining me on this journey to explore the vast and rapidly-evolving world of machine learning and AI."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Exploring the World of Machine Learning",
    "section": "",
    "text": "Training a simple classification model with fastai\n\n\n\n\n\n\n\nfastai\n\n\nclassification\n\n\n\n\n\n\n\n\n\n\n\nJan 8, 2023\n\n\nSwan Aung\n\n\n\n\n\n\n\n\nNotes from Learning How to Learn\n\n\n\n\n\n\n\nblogging\n\n\nlearning how to learn\n\n\n\n\n\n\n\n\n\n\n\nJan 2, 2023\n\n\nSwan Aung\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/learning-how-to-learn/Notes from Learning How to Learn.html",
    "href": "posts/learning-how-to-learn/Notes from Learning How to Learn.html",
    "title": "Notes from Learning How to Learn",
    "section": "",
    "text": "These are just a few key takeaways from the course “Learning How to Learn”. The course provides more in-depth information and strategies for learning effectively.\n\nActive learning is more effective than passive learning: Instead of just reading or listening to lectures, actively engage with the material by taking notes, summarizing, and asking questions.\nDistributed practice is more effective than cramming: Spreading out your study sessions over a longer period of time rather than cramming all the information in a short time can help you retain the information better.\nTake breaks to avoid burnout: Taking regular breaks during your study sessions can help you stay focused and prevent burnout.\nThe Pomodoro Technique can help you with that: This technique involves breaking down your study sessions into 25-minute intervals, followed by a short break. This can help you stay focused and prevent burnout.\nSleep is important for learning: Getting enough sleep is essential for consolidating new information and making it easier to recall later.\nUse mnemonics to help remember information: Mnemonics are memory aids that can help you remember information by associating it with something that is easy to remember. Examples of mnemonics include acrostics, where the first letter of each word in a phrase represents something else, and visualization, where you create a mental image of the information.\nChunking can help you remember information better: Chunking involves breaking down large amounts of information into smaller, more manageable pieces. This can make it easier to remember and retrieve the information later.\nInterleaving can help you learn multiple skills at once: This technique involves alternating between different topics or skills during your study sessions, rather than focusing on one at a time. This can help you build connections between different pieces of information and helps you transfer your knowledge to new situations and that will improve your overall understanding.\nPractice testing can help you retain information: Testing yourself on the material you’ve learned can help you retain the information better than simply re-reading the material.\nThe Feynman Technique can help you understand complex concepts: This technique involves explaining a concept in your own words, as if you were teaching it to someone else. This can help you identify any gaps in your understanding and solidify your understanding of the concept.\nUse self-explanation to improve understanding: Self-explanation is the process of explaining what you’re learning to yourself. This can help you identify any gaps in your understanding and improve your overall understanding of the material.\nUse elaboration to make new information meaningful: Elaboration is the process of connecting new information to something you already know. This can help you make the information more meaningful and easier to remember.\nMindset is important for learning: A growth mindset, where you believe that your abilities can be developed through effort and learning, can be more beneficial for learning than a fixed mindset, where you believe that your abilities are set in stone.\nReflect on your learning to improve: Reflecting on your learning process can help you identify areas for improvement and make adjustments to your study techniques.\n\nThese notes are based on the idea of the course and can help you improve your understanding of how to learn effectively. Keep in mind that there is no one-size-fits-all approach to learning, and what works for one person may not work for another. Experiment with different techniques and find out what works best for you."
  },
  {
    "objectID": "posts/training-classification-model-with-fastai/marvel-dc-characters-classification.html",
    "href": "posts/training-classification-model-with-fastai/marvel-dc-characters-classification.html",
    "title": "Training a simple classification model with fastai",
    "section": "",
    "text": "This notebook is based on fastai course 2022 lesson 1 and 2"
  },
  {
    "objectID": "posts/training-classification-model-with-fastai/marvel-dc-characters-classification.html#example-download",
    "href": "posts/training-classification-model-with-fastai/marvel-dc-characters-classification.html#example-download",
    "title": "Training a simple classification model with fastai",
    "section": "example download",
    "text": "example download\n\nurls = search_images('superman', max_images=1)\nurls[0]\n\n\nfrom fastdownload import download_url\ndest = 'superman.jpg'\ndownload_url(urls[0], dest, show_progress=False)\n\nfrom fastai.vision.all import *\nim = Image.open(dest)\nim.to_thumb(256,256)\n\n\ndownload_url(search_images('batman photos', max_images=1)[0], 'batman.jpg', show_progress=False)\nImage.open('batman.jpg').to_thumb(256,256)"
  },
  {
    "objectID": "posts/training-classification-model-with-fastai/marvel-dc-characters-classification.html#create-a-character-list",
    "href": "posts/training-classification-model-with-fastai/marvel-dc-characters-classification.html#create-a-character-list",
    "title": "Training a simple classification model with fastai",
    "section": "Create a character list",
    "text": "Create a character list\n\nmarvel = ['ironman', 'spiderman' , 'doctor strange' , 'hulk' , 'thanos', 'vision marvel',\n        'ant man', 'black panther', 'black widow', 'captain marvel' , 'captain america']\n\n\ndc = ['Black Adam', 'Batman', 'Superman', 'Wonder Woman', 'dc Green Lantern', \n      'dc the Flash', 'DC aquaman', 'dc Cyborg', 'dc Black Canary']\n\n\nmarvel_dc = marvel+dc\n\n\nnew_list = []\nfor c in marvel_dc:\n    new_list.append(c+'.jpg')\n\nOr Crawl the character names from the internet if you dont want to create manually"
  },
  {
    "objectID": "posts/training-classification-model-with-fastai/marvel-dc-characters-classification.html#crawl-dc-characters-example",
    "href": "posts/training-classification-model-with-fastai/marvel-dc-characters-classification.html#crawl-dc-characters-example",
    "title": "Training a simple classification model with fastai",
    "section": "Crawl DC characters (example)",
    "text": "Crawl DC characters (example)\n\nimport requests\nfrom bs4 import BeautifulSoup\n\nURL = \"https://comicvine.gamespot.com/profile/theoptimist/lists/top-100-dc-characters/32198/\"\npage = requests.get(URL)\n\nsoup = BeautifulSoup(page.content, \"html.parser\")\n\nname_list = soup.find_all(name='h3')\n\nc_name = []\nfor name in name_list:\n    c_name.append(name.getText())\n    \ndc_characters = [\"\".join(name.split('.')[1:]).strip() for name in c_name]\ndc_characters = list(filter(None, dc_characters))"
  },
  {
    "objectID": "posts/training-classification-model-with-fastai/marvel-dc-characters-classification.html#get-the-images-and-store-it-in-the-path-that-you-want",
    "href": "posts/training-classification-model-with-fastai/marvel-dc-characters-classification.html#get-the-images-and-store-it-in-the-path-that-you-want",
    "title": "Training a simple classification model with fastai",
    "section": "Get the images and store it in the path that you want",
    "text": "Get the images and store it in the path that you want\n\npath = Path('marvel-dc')\nfrom time import sleep\n\nfor o in tuple(marvel_dc):\n#for o in superhero_name:\n    try:\n        dest = (path/o)\n        dest.mkdir(exist_ok=True, parents=True)\n        download_images(dest, urls=search_images(f'{o} photo'))\n        sleep(10)  # Pause between searches to avoid over-loading server\n        resize_images(path/o, max_size=400, dest=path/o) # resize the images for training\n    except:\n        print(o)"
  },
  {
    "objectID": "posts/training-classification-model-with-fastai/marvel-dc-characters-classification.html#step-2-train-our-model",
    "href": "posts/training-classification-model-with-fastai/marvel-dc-characters-classification.html#step-2-train-our-model",
    "title": "Training a simple classification model with fastai",
    "section": "Step 2: Train our model",
    "text": "Step 2: Train our model\nSome photos might not download correctly which could cause our model training to fail, so we’ll remove them:\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\nTo train a model, we’ll need DataLoaders, which is an object that contains a training set (the images used to create a model) and a validation set (the images used to check the accuracy of a model – not used during training). In fastai we can create that easily using a DataBlock, and view sample images from it:\n\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock), \n    get_items=get_image_files, \n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path)\n\ndls.show_batch(max_n=6)\n\nNow we’re ready to train our model. The fastest widely used computer vision model is resnet18. You can train this in a few minutes, even on a CPU! (On a GPU, it generally takes under 10 seconds…)\nfastai comes with a helpful fine_tune() method which automatically uses best practices for fine tuning a pre-trained model, so we’ll use that.\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(5)"
  },
  {
    "objectID": "posts/training-classification-model-with-fastai/marvel-dc-characters-classification.html#test-model",
    "href": "posts/training-classification-model-with-fastai/marvel-dc-characters-classification.html#test-model",
    "title": "Training a simple classification model with fastai",
    "section": "Test model",
    "text": "Test model\n\n#PILImage.create('superman.jpg')\n\nim = PILImage.create('superman.jpg')\nim.thumbnail((224,224))\nim\n\n\nis_superman,_,probs = learn.predict(PILImage.create('superman.jpg'))\n\n\n#export\ncategories = learn.dls.vocab\n\ndef classify_image(img):\n    pred,idx,probs = learn.predict(img)\n    return dict(zip(categories, map(float,probs)))\n\n\nclassify_image(im)\n\n\nprint(f\"This is a: {is_superman}.\")\nprint(f\"Probability it's superman: {probs[0]:.4f}\")"
  }
]