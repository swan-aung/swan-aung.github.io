[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to “The Machine Learning Journey”!\nMy name is Swan Aung and I am a Machine Learning enthusiast and practitioner. On this blog, I will be sharing my thoughts, experiences, and insights on the fascinating world of Machine Learning and Artificial Intelligence. Whether you are a beginner looking to learn more about these technologies or an experienced practitioner looking for new ideas and perspectives, I hope you will find something of value here. Thank you for joining me on this journey to explore the vast and rapidly-evolving world of machine learning and AI."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Exploring the World of Machine Learning",
    "section": "",
    "text": "Notes from Learning How to Learn\n\n\n\n\n\n\n\nblogging\n\n\n\n\n\n\n\n\n\n\n\nJan 8, 2023\n\n\nSwan Aung\n\n\n\n\n\n\n\n\nCreating a first Blog Post using a Jupyter Notebook\n\n\n\n\n\n\n\nblogging\n\n\nquarto\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nJan 8, 2023\n\n\nSwan Aung\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/training-classification-model-with-fastai/image_classification.html",
    "href": "posts/training-classification-model-with-fastai/image_classification.html",
    "title": "Creating a first Blog Post using a Jupyter Notebook",
    "section": "",
    "text": "import torch"
  },
  {
    "objectID": "posts/training-classification-model-with-fastai/image_classification.html#step-1-download-images-of-birds-and-non-birds",
    "href": "posts/training-classification-model-with-fastai/image_classification.html#step-1-download-images-of-birds-and-non-birds",
    "title": "Creating a first Blog Post using a Jupyter Notebook",
    "section": "Step 1: Download images of birds and non-birds",
    "text": "Step 1: Download images of birds and non-birds\n\nfrom duckduckgo_search import ddg_images\nfrom fastcore.all import *\n\ndef search_images(term, max_images=200): \n    return L(ddg_images(term, max_results=max_images)).itemgot('image')\n\n\nurls = search_images('superman', max_images=1)\nurls[0]\n\n'https://posterspy.com/wp-content/uploads/2019/09/Superman-Portrait-small.jpg'\n\n\n…and then download a URL and take a look at it:\n\nfrom fastdownload import download_url\ndest = 'superman.jpg'\ndownload_url(urls[0], dest, show_progress=False)\n\nfrom fastai.vision.all import *\nim = Image.open(dest)\nim.to_thumb(256,256)\n\n\n\n\n\ndownload_url(search_images('batman photos', max_images=1)[0], 'batman.jpg', show_progress=False)\nImage.open('batman.jpg').to_thumb(256,256)\n\n\n\n\nOur searches seem to be giving reasonable results, so let’s grab 200 examples of each of “bird” and “forest” photos, and save each group of photos to a different folder:\n\nCrawl DC characters\n\nimport requests\nfrom bs4 import BeautifulSoup\n\nURL = \"https://comicvine.gamespot.com/profile/theoptimist/lists/top-100-dc-characters/32198/\"\npage = requests.get(URL)\n\nsoup = BeautifulSoup(page.content, \"html.parser\")\n\n\nname_list = soup.find_all(name='h3')\n\n\nc_name = []\nfor name in name_list:\n    c_name.append(name.getText())\n\n\ndc_characters = [\"\".join(name.split('.')[1:]).strip() for name in c_name]\n\n\ndc_characters = list(filter(None, dc_characters))\n\n\ndc_characters = ['DC character ' + c for c in dc_characters]\n\n\ndc_characters[0:3]\n\n['DC character Hal Jordan', 'DC character Batman', 'DC character Dick Grayson']\n\n\n\ndownload_url(search_images('DC character Hal Jordan', max_images=1)[0], 'Hal Jordan.jpg', show_progress=True)\n\n\n    \n        \n      \n      101.30% [327680/323464 00:00<00:00]\n    \n    \n\n\nPath('Hal Jordan.jpg')\n\n\n\nImage.open('Hal Jordan.jpg').to_thumb(256,256)\n\n\n\n\n\nsuperhero_name = tuple(dc_characters)\n\n\nsuperhero_name[0:3]\n\n('DC character Hal Jordan', 'DC character Batman', 'DC character Dick Grayson')\n\n\n\ndownload_url(search_images('DC character Hal Jordan', max_images=1)[0], 'Hal Jordan.jpg', show_progress=True)\n\n\n# test code\n#path = Path('test')\n# dest = (path)\n# dest.mkdir(exist_ok=True, parents=True)\n# download_images(dest, urls=search_images(f'DC character Batman shade photo'))\n\n\nsuperhero_name[54:]\n\n('DC character Black Adam',\n 'DC character Miss Martian',\n 'DC character Larfleeze',\n 'DC character Detective Chimp',\n 'DC character Alan Scott',\n 'DC character Phantom Girl',\n 'DC character Zatanna',\n 'DC character Atrocitus',\n 'DC character Mr Mxyzptlk',\n 'DC character Harley Quinn',\n 'DC character Gypsy',\n 'DC character Kate Spencer',\n 'DC character Black Canary',\n 'DC character Poison Ivy',\n 'DC character Knockout',\n 'DC character Renee Montoya',\n 'DC character Scandal Savage',\n 'DC character Bane',\n 'DC character Fire',\n 'DC character Bizarro',\n 'DC character Billy Batson',\n 'DC character Amanda Waller',\n 'DC character Jeannette',\n 'DC character Talia al Ghul',\n 'DC character Huntress (Bertinelli)',\n 'DC character Deadshot',\n 'DC character Phantom Stranger',\n 'DC character Martian Manhunter',\n 'DC character Mr Freeze',\n 'DC character Superboy Prime',\n 'DC character Ragdoll',\n 'DC character Dream Girl',\n 'DC character Mera',\n 'DC character Starfire',\n 'DC character Catwoman',\n 'DC character Penguin',\n 'DC character Steel',\n 'DC character Bart Allen',\n 'DC character Deadman',\n 'DC character Jade',\n 'DC character Ray Palmer',\n 'DC character Wonder Girl',\n 'DC character Jay Garrick',\n 'DC character Static',\n 'DC character Beast Boy',\n 'DC character Killer Croc')\n\n\n\npath = Path('dc_superheros')\nfrom time import sleep\n\nfor o in superhero_name[55:]:\n#for o in superhero_name:\n    try:\n        dest = (path/o)\n        dest.mkdir(exist_ok=True, parents=True)\n        download_images(dest, urls=search_images(f'{o} photo'))\n        sleep(10)  # Pause between searches to avoid over-loading server\n    #     download_images(dest, urls=search_images(f'{o} sun photo'))\n    #     sleep(10)\n    #     download_images(dest, urls=search_images(f'{o} shade photo'))\n    #     sleep(10)\n        resize_images(path/o, max_size=400, dest=path/o)\n    except:\n        print(o)\n\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/PIL/Image.py:979: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  warnings.warn(\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/PIL/Image.py:979: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  warnings.warn(\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/PIL/Image.py:979: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  warnings.warn(\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/PIL/Image.py:1042: UserWarning: Couldn't allocate palette entry for transparency\n  warnings.warn(\"Couldn't allocate palette entry for transparency\")\n\n\nDC character Knockout\n\n\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/PIL/Image.py:979: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  warnings.warn(\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/PIL/Image.py:979: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  warnings.warn(\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/PIL/Image.py:979: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  warnings.warn(\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/PIL/Image.py:979: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  warnings.warn(\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/PIL/Image.py:979: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  warnings.warn(\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/PIL/Image.py:979: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  warnings.warn(\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/PIL/Image.py:979: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  warnings.warn(\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/PIL/Image.py:979: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  warnings.warn(\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/PIL/Image.py:979: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  warnings.warn(\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/PIL/Image.py:979: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  warnings.warn(\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/PIL/Image.py:979: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  warnings.warn(\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/PIL/Image.py:979: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  warnings.warn("
  },
  {
    "objectID": "posts/training-classification-model-with-fastai/image_classification.html#step-2-train-our-model",
    "href": "posts/training-classification-model-with-fastai/image_classification.html#step-2-train-our-model",
    "title": "Creating a first Blog Post using a Jupyter Notebook",
    "section": "Step 2: Train our model",
    "text": "Step 2: Train our model\nSome photos might not download correctly which could cause our model training to fail, so we’ll remove them:\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\n704\n\n\nTo train a model, we’ll need DataLoaders, which is an object that contains a training set (the images used to create a model) and a validation set (the images used to check the accuracy of a model – not used during training). In fastai we can create that easily using a DataBlock, and view sample images from it:\n\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock), \n    get_items=get_image_files, \n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path)\n\ndls.show_batch(max_n=6)\n\n\n\n\nHere what each of the DataBlock parameters means:\nblocks=(ImageBlock, CategoryBlock),\nThe inputs to our model are images, and the outputs are categories (in this case, “bird” or “forest”).\nget_items=get_image_files, \nTo find all the inputs to our model, run the get_image_files function (which returns a list of all image files in a path).\nsplitter=RandomSplitter(valid_pct=0.2, seed=42),\nSplit the data into training and validation sets randomly, using 20% of the data for the validation set.\nget_y=parent_label,\nThe labels (y values) is the name of the parent of each file (i.e. the name of the folder they’re in, which will be bird or forest).\nitem_tfms=[Resize(192, method='squish')]\nBefore training, resize each image to 192x192 pixels by “squishing” it (as opposed to cropping it).\nNow we’re ready to train our model. The fastest widely used computer vision model is resnet18. You can train this in a few minutes, even on a CPU! (On a GPU, it generally takes under 10 seconds…)\nfastai comes with a helpful fine_tune() method which automatically uses best practices for fine tuning a pre-trained model, so we’ll use that.\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(3)\n\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n  warnings.warn(\n/home/swanaung/miniconda3/envs/fastai_env/lib/python3.9/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      4.592243\n      3.403413\n      0.769492\n      00:28\n    \n  \n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      3.177329\n      2.749275\n      0.644992\n      00:29\n    \n    \n      1\n      2.321068\n      2.434963\n      0.567334\n      00:28\n    \n    \n      2\n      1.381203\n      2.387257\n      0.561479\n      00:29\n    \n  \n\n\n\n\nlearn.fine_tune(3)\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      1.354707\n      2.542583\n      0.569492\n      00:23\n    \n  \n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      1.368753\n      2.565141\n      0.564869\n      00:28\n    \n    \n      1\n      0.911510\n      2.470206\n      0.537134\n      00:28\n    \n    \n      2\n      0.410086\n      2.464633\n      0.539291\n      00:28\n    \n  \n\n\n\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(3)\n\n/home/swanaung/mambaforge/envs/torch_env/lib/python3.7/site-packages/torchvision/models/_utils.py:209: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and will be removed in 0.15, please use 'weights' instead.\n  f\"The parameter '{pretrained_param}' is deprecated since 0.13 and will be removed in 0.15, \"\n/home/swanaung/mambaforge/envs/torch_env/lib/python3.7/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\nDownloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /home/swanaung/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n100%|██████████| 44.7M/44.7M [00:08<00:00, 5.60MB/s]\n\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      0.728870\n      0.363167\n      0.064039\n      00:20\n    \n  \n\n\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      error_rate\n      time\n    \n  \n  \n    \n      0\n      0.231702\n      0.149980\n      0.044335\n      00:05\n    \n    \n      1\n      0.144831\n      0.211737\n      0.064039\n      00:03\n    \n    \n      2\n      0.101629\n      0.200589\n      0.054187\n      00:03"
  },
  {
    "objectID": "posts/training-classification-model-with-fastai/image_classification.html#step-3-use-our-model-and-build-your-own",
    "href": "posts/training-classification-model-with-fastai/image_classification.html#step-3-use-our-model-and-build-your-own",
    "title": "Creating a first Blog Post using a Jupyter Notebook",
    "section": "Step 3: Use our model (and build your own!)",
    "text": "Step 3: Use our model (and build your own!)\n\n#PILImage.create('superman.jpg')\n\nim = PILImage.create('superman.jpg')\nim.thumbnail((224,224))\nim\n\n\n\n\n\nis_superman,_,probs = learn.predict(PILImage.create('superman.jpg'))\n\n\n\n\n\n#export\ncategories = learn.dls.vocab\n\ndef classify_image(img):\n    pred,idx,probs = learn.predict(img)\n    return dict(zip(categories, map(float,probs)))\n\n\n#classify_image(im)\n\n\nprint(f\"This is a: {is_superman}.\")\nprint(f\"Probability it's superman: {probs[0]:.4f}\")\n\nThis is a: DC character Superman.\nProbability it's superman: 0.0000\n\n\n\nlearn.export('model_output/model_dc_char.pkl')"
  }
]